---
title: Git Rev News Edition 96 (February 22nd, 2023)
layout: default
date: 2023-02-22 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 96 (February 22nd, 2023)

Welcome to the 96th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the months of January and February 2023.

## Discussions

<!---
### General
-->

<!---
### Reviews
-->


### Support

* [Bug?: `ORIG_HEAD` incorrect after reset during `git-rebase -i`](https://lore.kernel.org/git/CA+JQ7M-ynq1cLN-3ZodXae=x-H5k7Ab6uPBwUFhG+kgtOvCgtA@mail.gmail.com/)

  Erik Cervin Edin sent an email to the mailing list with steps to
  reproduce a behavior that he didn't like. The steps consisted of an
  interactive rebase during which a commit was edited and a reset which
  was performed while editing the commit.

  After editing, `git rebase --continue` finished the rebase. But then
  Erik expected `ORIG_HEAD` to point to the tip
  of the rebased branch before the rebase, while instead it pointed to
  the `HEAD` before the reset.

  `ORIG_HEAD` is one of the pseudo-references that some Git commands
  use, like `FETCH_HEAD`, `MERGE_HEAD`, and a few others.

  Phillip Wood replied to Erik saying that it was expected that `git
  reset` would change `ORIG_HEAD` to `HEAD` just before it was
  performed. He suggested using the reflog with something like
  `branch-name@{1}` where `branch-name` is the branch being
  rebased and the `@{1}` part indicates the previous entry in the
  reflog for the branch.

  Erik replied that he knew about the reflog but just expected
  `ORIG_HEAD` to be reset to `.git/rebase-merge/orig-head` at the end of
  the rebase. `.git/rebase-merge/orig-head` is an internal file that
  stores the tip of the branch before a rebase operation.

  Philippe Blain replied to Erik that he just hit the same bug. He
  also said that he was confused by the rebase documentation and supplied
  the series of commands he used to get hit.

  Phillip Wood replied to both Erik and Philippe Blain that if we
  changed the behavior to make `ORIG_HEAD` point to the tip of the
  branch before it was rebased, some people might not be happy as they
  might expect `git reset` to have changed `ORIG_HEAD`. Other people
  might expect on the contrary that `ORIG_HEAD` was always set to the
  tip of the branch before the rebase when the rebase stopped, which
  would mean that `git rebase --continue` would always need to make
  sure `ORIG_HEAD` fulfilled that expectation.

  Phillip said he thought the situation was confusing and he didn't
  see a way to make it clearer.

  Philippe Blain agreed that some people might rely on the current
  behavior and said he would send documentation updates to make things
  clearer.

  He then sent
  [a patch series](https://lore.kernel.org/git/pull.1456.git.1673120359.gitgitgadget@gmail.com/)
  consisting of small changes to the documentation of a number of
  commands: `cherry-pick`, `merge`, `rebase` and `reset`, as well as
  to the [documentation about Git revisions](https://git-scm.com/docs/gitrevisions).

  Junio Hamano, the Git maintainer, commented on some wordings, which
  after short discussions led Philippe to send
  [a version 2 of his series](https://lore.kernel.org/git/pull.1456.v2.git.1673356521.gitgitgadget@gmail.com/)
  with very few changes.

  This version was accepted and later merged into the master branch.

<!---
## Developer Spotlight:
-->

## Releases

+ Git [2.40.0-rc0](https://public-inbox.org/git/xmqq7cw6yfpt.fsf@gitster.g/),
[2.39.2 and friends](https://public-inbox.org/git/xmqqr0us5dio.fsf@gitster.g/)
+ Git for Windows [2.39.2(1)](https://github.com/git-for-windows/git/releases/tag/v2.39.2.windows.1)
+ libgit2 [1.6.1](https://github.com/libgit2/libgit2/releases/tag/v1.6.1),
[1.5.2](https://github.com/libgit2/libgit2/releases/tag/v1.5.2)
+ Bitbucket Server [8.8](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [3.5.5](https://www.gerritcodereview.com/3.5.html#355),
[3.6.4](https://www.gerritcodereview.com/3.6.html#364),
[3.7.1](https://www.gerritcodereview.com/3.7.html#371)
+ GitHub Enterprise [3.7.6](https://help.github.com/enterprise-server@3.7/admin/release-notes#3.7.6),
[3.6.9](https://help.github.com/enterprise-server@3.6/admin/release-notes#3.6.9),
[3.5.13](https://help.github.com/enterprise-server@3.5/admin/release-notes#3.5.13),
[3.4.16](https://help.github.com/enterprise-server@3.4/admin/release-notes#3.4.16),
[3.8.0](https://help.github.com/enterprise-server@3.8/admin/release-notes#3.8.0),
[3.7.5](https://help.github.com/enterprise-server@3.7/admin/release-notes#3.7.5),
[3.6.8](https://help.github.com/enterprise-server@3.6/admin/release-notes#3.6.8),
[3.5.12](https://help.github.com/enterprise-server@3.5/admin/release-notes#3.5.12),
[3.4.15](https://help.github.com/enterprise-server@3.4/admin/release-notes#3.4.15)
+ GitLab [15.9.1](https://about.gitlab.com/releases/2023/02/24/gitlab-15-9-1-released/)
[15.9](https://about.gitlab.com/releases/2023/02/22/gitlab-15-9-released/),
[15.8.2, 15.7.7 and 15.6.8](https://about.gitlab.com/releases/2023/02/14/critical-security-release-gitlab-15-8-2-released/),
[15.8.3](https://about.gitlab.com/releases/2023/02/14/gitlab-15-8-3-released/),
[15.8.1](https://about.gitlab.com/releases/2023/01/31/security-release-gitlab-15-8-1-released/)
+ GitKraken [9.1.1](https://help.gitkraken.com/gitkraken-client/current/),
[9.1.0](https://help.gitkraken.com/gitkraken-client/current/)
+ GitHub Desktop [3.1.8](https://desktop.github.com/release-notes/),
[3.1.7](https://desktop.github.com/release-notes/),
[3.1.6](https://desktop.github.com/release-notes/)
+ tig [2.5.8](https://github.com/jonas/tig/releases/tag/tig-2.5.8)
+ Tower for Mac [9.2](https://www.git-tower.com/release-notes/mac?show_tab=release-notes)
+ Tower for Windows [4.2](https://www.git-tower.com/release-notes/windows?show_tab=release-notes) ([blog post](https://www.git-tower.com/blog/tower-win-4-2/))

## Other News

__Various__
* The Git project has been accepted as
  [a Mentor Organization](https://summerofcode.withgoogle.com/programs/2023/organizations/git)
  for Google Summer of Code (GSoC) 2023.
* [GitLab Improves Merge Requests, GitOps Functionality and More](https://www.infoq.com/news/2023/02/gitlab-15-3-through-15-8-release/)
  by Matt Saunders on InfoQ, about versions 15.3 through 15.8.
* [Git archive generation meets Hyrum's law](https://lwn.net/Articles/921787/)
  by Jonathan Corbet on LWN\.net (affecting Git and GitHub).


__Light reading__
* [Will GitOps Change Software Development Forever?](https://www.analyticsinsight.net/will-gitops-change-software-development-forever/)
  by Harshini on Analytics Insight.
* [Git signoff and signing like a champ](https://dev.to/janderssonse/git-signoff-and-signing-like-a-champ-41f3)
  by Josef Andersson on DEV\.to.
* [How to Merge a Git Feature Branch with a Squash Commit](https://dev.to/esaraviam/how-to-merge-a-git-feature-branch-with-a-squash-commit-8af)
  by Luis Esteban Saravia M on DEV\.to.<br>
  This is an alternative to repeatedly using the `squash` command of the [interactive rebase](https://git-scm.com/docs/git-rebase#_interactive_mode).
* [Why I love GitLens in my VsCode - Part 1](https://blog.delpuppo.net/why-i-love-gitlens-in-my-vscode-part-1),
  [Part 2](https://blog.delpuppo.net/why-i-love-gitlens-in-my-vscode-part-2),
  and [Part 3](https://blog.delpuppo.net/why-i-love-gitlens-in-my-vscode-part-3)
  by Luca Del Puppo on his blog.<br>
  Also available [on DEV\.to](https://dev.to/this-is-learning/why-i-love-gitlens-in-my-vscode-part-1-5cmp).
* [Data versioning](https://danmackinlay.name/notebook/data_versioning.html),
  a rough work-in-progress notebook by Dan MacKinlay.
  Includes descriptions of
    * [Data Version Control (DVC)](https://dvc.org/) (first mentioned in [Git Rev News Edition #42](https://git.github.io/rev_news/2018/08/22/edition-42/)),
    * [Dolt](https://www.dolthub.com/), which is a [version controlled SQL database](https://www.dolthub.com/blog/2021-09-17-database-version-control/)
      (first mentioned in [Git Rev News Edition #62](https://git.github.io/rev_news/2020/04/23/edition-62/)),
    * [Pachyderm](https://www.pachyderm.com/) (first mentioned in [Git Rev News Edition #49](https://git.github.io/rev_news/2019/03/20/edition-49/)),
    * [git-annex](http://git-annex.branchable.com/) - not targeted specifically at data science
      (first mentioned in passing in [Git Rev News #3](https://git.github.io/rev_news/2015/05/13/edition-3/)),
    * [DataLad](https://www.datalad.org/),
    * [Go Get Data (ggd)](https://gogetdata.github.io/) from the genomics community;
      it seems to be a lighter version of Pachyderm,
    * [Splitgraph](https://www.splitgraph.com/docs/getting-started/introduction),
      which works on top of PostgreSQL,
    * [Sno](https://sno.earth/) to store geospatial and tabular data in Git<br>
      (see also [Kart](https://kartproject.org/), mentioned in [Git Rev News #85](https://git.github.io/rev_news/2022/03/31/edition-85/),
      _which is not listed in this notebook_).

  The notebook also mentions
  [Pangeo Forge](https://github.com/pangeo-forge/roadmap) (like Conda Forge, but for data),
  [Intake](https://intake.readthedocs.io/en/latest/index.html) (lightweight package for finding, investigating, loading and disseminating data), and
  [Flat Data](https://githubnext.com/projects/flat-data) - formerly GitHub OCTO
  (to bring working sets of data to your repositories, based on the
  [“Git scraping” approach pioneered by Simon Willison](https://simonwillison.net/2020/Oct/9/git-scraping/)
  (mentioned in [Git Rev News Edition #68](https://git.github.io/rev_news/2020/10/30/edition-68/))).<br>
  See also [Git Rev News #82](https://git.github.io/rev_news/2021/12/30/edition-82/),
  which mentions tools for version controlling database schemas, version controlling queries,
  data versioning, etc. -- all taken from articles on DoltHub Blog.
* [The Git source code audit, viewed as a Rust programmer](https://litchipi.github.io/infosec/2023/01/24/git-code-audit-viewed-as-rust-programmer.html)
  by Litchi Pi (Tim); the audit itself was mentioned in [Git Rev News #95](https://git.github.io/rev_news/2023/01/31/edition-95/).
* [An Easy git Workflow](https://dev.to/ovid/an-easy-git-workflow-4gm0)
  by Curtis “Ovid” Poe on DEV\.to.<br>
  Also available as [Easy Git Workflow](https://ovid.github.io/articles/easy-git-workflow.html) (2020)
  on [(Technical) Articles by Ovid](https://ovid.github.io/articles.html).

<!-- Separated, because they are less connected to Git -->
* [The technology behind GitHub’s new code search](https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/)
  by Timothy Clem in the Engineering section of the GitHub Blog.
* [Mobile Price Classification: An Open Source Data Science Project with Dagshub](https://hackernoon.com/mobile-price-classification-an-open-source-data-science-project-with-dagshub)
  by Davis David (@davisdavid) on HackerNoon.
    * The workflow described in this article uses
      [DVC](https://dvc.org/) (first mentioned in [Git Rev News Edition #42](https://git.github.io/rev_news/2018/08/22/edition-42/)),
      [DAGsHub](https://dagshub.com/) (first mentioned in [Git Rev News Edition #72](https://git.github.io/rev_news/2021/02/27/edition-72/)),
      MLflow, and the Streamlit library.
* [FAIR data pipeline: provenance-driven data management for traceable scientific workflows](https://royalsocietypublishing.org/doi/full/10.1098/rsta.2021.0300);
  an open access research article in Volume 380, Issue 2233
  of Philosophical Transactions of The Royal Society&nbsp;A
  ([DOI:10.1098/rsta.2021.0300](https://doi.org/10.1098/rsta.2021.0300)).


__Easy watching__
* [Move Commits Between Branches in Git](https://www.youtube.com/watch?v=0pzFGXvemvA)
  by Leonardo Montini, also known as Dev Leonardo.<br>
  You can read the accompanying [Move Commits Between Branches in Git - 3 Different Methods](https://dev.to/this-is-learning/move-commits-between-branches-in-git-3-different-methods-22bb)
  article on DEV\.to (for This is Learning), 5th part of the
  [git better - Improve your git skills](https://dev.to/balastrong/series/21372) series.


__Git tools and sites__
* [**conventional:** comments](https://conventionalcomments.org/) are a set of conventions
  to make code review comments to be easy to grok and grep.
    * This can be considered a companion to [Conventional Commits](https://www.conventionalcommits.org/) specification,
      first mentioned in [Git Rev News Edition #52](https://git.github.io/rev_news/2019/06/28/edition-52/).
* [Flipt](https://www.flipt.io/) is an [open source](https://github.com/flipt-io/flipt),
  self-hosted feature flag solution.
    * [Feature Flags](https://featureflags.io/) or [Feature Toggles](https://martinfowler.com/articles/feature-toggles.html)
      are a technique that allows to modify system behavior without changing code.
      They are often used with [Trunk Based Development](https://trunkbaseddevelopment.com/),
      as described in [Patterns for Managing Source Code Branches](https://martinfowler.com/articles/branching-patterns.html)
      by Martin Fowler, which was mentioned in [Git Rev News Edition #63](https://git.github.io/rev_news/2020/05/28/edition-63/).
* [git-workflow](https://github.com/Ovid/git-workflow)
  by Curtis “Ovid” Poe is a simplified subset of the Git tools used by
  [All Around the World](https://allaroundtheworld.fr/) company for software development.
  It provides three new commands: `git refresh`, `git pushback` and `git done`.
* [Git-Heat-Map](https://github.com/jmforsythe/Git-Heat-Map)
  is a tool to visualize a Git repository by diff activity using a treemap chart.
* [Diff/merge tools](https://danmackinlay.name/notebook/diffing.html) and
  [Git GUIs](https://danmackinlay.name/notebook/git_guis.html) - notebooks
  of Dan MacKinlay.
* [Git tricks](https://danmackinlay.name/notebook/git.html):
  Dan MacKinlay's notes and links, not intended to be tutorial.
* [Awesome CLI Apps](https://github.com/agarrharr/awesome-cli-apps)
  is a curated list of command line apps, including the ones
  [for Version Control](https://github.com/agarrharr/awesome-cli-apps#version-control).
* [Automerge 2.0](https://automerge.org/blog/automerge-2/)
  is a [CRDT](https://crdt.tech/), or "Conflict-free Replicated Data Type",
  that one can use to implement real-time collaboration for an application,
  which is focused on optimizing editing of plaintext.


## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from XXX.

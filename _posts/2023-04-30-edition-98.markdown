---
title: Git Rev News Edition 98 (April 30th, 2023)
layout: default
date: 2023-04-30 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 98 (April 30th, 2023)

Welcome to the 98th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the months of March 2023 and April 2023.

## Discussions

<!---
### General
-->

<!---
### Reviews
-->

### Support

* [Suspected git grep regression in git 2.40.0](https://lore.kernel.org/git/7E83DAA1-F9A9-4151-8D07-D80EA6D59EEA@clumio.com/)

  Stephane Odul reported that running the command

  `git grep -cP '^\w+ = json.load'`

  on some files of a private repo started failing consistently with an
  exit code of -11 in Git v2.40.0 while it worked with previous Git
  versions.

  Bagas Sanjaya replied to Stephane asking him if he could use `git
  bisect` between v2.39.0 and v2.40.0 to see which commit in Git's
  history broke the feature.

  Junio Hamano, the Git maintainer, thought the issue might have been
  created by a recent change in how Git uses the
  [PCRE2 library](https://www.pcre.org/). This change made Git try to
  run PCRE2's JIT (Just In Time) compiler on a sample pattern and fall
  back to not using the JIT compiler if the attempt failed.

  Junio said it could alternatively be that the version of the PCRE2
  library linked to v2.40 had been updated compared to the one in
  previous Git versions, but asked if it made a difference to disable
  the JIT compiler by prefixing the pattern with `(*NO_JIT)`.

  Mathias Krause, who had worked on PCRE2 related issues recently,
  replied that another commit with the subject "grep: correctly
  identify utf-8 characters with \{b,w} in -P" seemed more suspect to
  him as it was about both the `-P` option and the `\w` pattern.

  Looking at the diff of that commit, Mathias found that it added the
  `PCRE2_UCP` flag to the PCRE2 library call when an UTF-8 locale was
  used, and that PCRE2 had a `PCRE2_ERROR_UTF8_ERR9` (-11) error code
  described as "5th-byte's two top bits are not 0x80" that matched
  the exit code of -11 which Stephane got.

  Mathias then asked Stephane if a file in his repo might contain
  invalid UTF-8 output, and suggested testing this using the following
  command:

  ```
  $ iconv -f UTF-8 your_file > /dev/null && echo OK || echo "Not valid"
  ```

  Stephane replied that he created a custom pipeline to try to
  reproduce the issue and found that restricting the `git grep`
  command to Python files (using `'*.py'`) was a good workaround, and
  that the issue was likely related to other files in "various
  formats, including potentially some binaries that would definitely
  not be proper UTF-8". He also noted that using `(*NO_JIT)` as
  suggested by Junio prevented the issue but slowed down the command a
  lot for some patterns.

  Mathias, in the meantime, was able to reproduce the error on the Git
  repo. He got a segfault and also a backtrace under gdb, but the
  backtrace was very short and without any debug symbols, so he
  supposed that it happened in the call stack of PCRE2's JIT
  compiler. Looking at the memory mapping and the instructions also
  seemed to point to a JIT compiler bug.

  Mathias then reverted the commit that added the `PCRE2_UCP` flag to
  the PCRE2 library call, and found that it fixed the bug, which
  confirmed his earlier suspicion about that commit.

  Stephane thanked Mathias for his great work and left saying he was
  happy with the workaround he had found and did not believe there was
  much more he could contribute to the issue.

  Mathias replied to his previous email saying he had found "an
  interesting entry in the PCRE2's changelog for version 10.35":<br/>
  <https://github.com/PCRE2Project/pcre2/blob/pcre2-10.35/ChangeLog#L66>:<br/>
  "17. Fix a crash which occurs when the character type of an invalid UTF
  character is decoded in JIT."

  He concluded that it was needed to implement "yet another quirk to
  handle these broken versions", and came up with an in-email patch
  that was not using the `PCRE2_UCP` flag when Git was compiled to
  link to a PCRE2 version lower than 10.35. He wondered though if it
  was better to just revert the commit that had introduced the
  `PCRE2_UCP` flag.

  Junio replied to Mathias by first thanking him for "all the
  investigation and a prompt fix" and then saying that the approach in
  his patch was more sensible than reverting the commit. He suggested
  a small code change though.

  Mathias agreed with Junio's suggestion and sent
  [a version 2 of his patch](https://lore.kernel.org/git/20230323172539.25230-1-minipli@grsecurity.net/)
  that was then merged into the `master` branch.

<!---
## Developer Spotlight:
-->

## Releases
+ Git [2.40.1 and friends](https://public-inbox.org/git/xmqqa5yv3n93.fsf@gitster.g/)
+ Git for Windows [2.40.1(1)](https://github.com/git-for-windows/git/releases/tag/v2.40.1.windows.1)
+ libgit2 [1.6.4](https://github.com/libgit2/libgit2/releases/tag/v1.6.4)
+ GitLab [15.11](https://about.gitlab.com/releases/2023/04/22/gitlab-15-11-released/)
[15.10.4](https://about.gitlab.com/releases/2023/04/21/gitlab-15-10-4-15-9-5-released/),
[15.7.9](https://about.gitlab.com/releases/2023/04/20/gitlab-15-7-9-released/),
[15.8.6](https://about.gitlab.com/releases/2023/04/19/gitlab-15-8-6-released/),
[15.10.3](https://about.gitlab.com/releases/2023/04/14/gitlab-15-10-3-released/),
[15.10.2](https://about.gitlab.com/releases/2023/04/05/gitlab-15-10-2-released/),
[15.10.1, 15.9.4, and 15.8.5](https://about.gitlab.com/releases/2023/03/30/security-release-gitlab-15-10-1-released/)
+ Bitbucket Server [8.9](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gitea [1.19.1](https://blog.gitea.io/2023/04/gitea-1.19.1-is-released/)
+ GitHub Enterprise [3.8.2](https://help.github.com/enterprise-server@3.8/admin/release-notes#3.8.2),
[3.5.16](https://help.github.com/enterprise-server@3.5/admin/release-notes#3.5.16),
[3.7.9](https://help.github.com/enterprise-server@3.7/admin/release-notes#3.7.9),
[3.6.12](https://help.github.com/enterprise-server@3.6/admin/release-notes#3.6.12)
+ GitKraken [9.3.0](https://help.gitkraken.com/gitkraken-client/current/)
+ GitHub Desktop [3.2.2](https://desktop.github.com/release-notes/),
[3.2.1](https://desktop.github.com/release-notes/)
+ git-credential-oauth [0.6.0](https://github.com/hickford/git-credential-oauth/releases/tag/v0.6.0)

## Other News

__Various__
+ [Git security vulnerabilities announced](https://github.blog/2023-04-25-git-security-vulnerabilities-announced-4/):
  CVE-2023-25652 and CVE-2023-29007,
  and MS Windows specific CVE-2023-25815, CVE-2023-29011, and CVE-2023-29012.
  By Taylor Blau on GitHub Blog. 


__Light reading__
+ [Git and GitHub for Designers](https://www.git-tower.com/blog/git-for-designers/) by Bruno Brito on Towerâ€™s blog.
+ [Git-Sim 3 Month Dev Update: Community Response, New Features, & The Future](https://initialcommit.com/blog/git-sim-3-month-dev-update)
  by Jacob Stopak on Initial Commit.  [Git-Sim](https://github.com/initialcommit-com/git-sim)
  was mentioned in [Git Rev News Edition #95](https://git.github.io/rev_news/2023/01/31/edition-95/).
+ [Smoother rebases with auto-squashing Git commits](https://andrewlock.net/smoother-rebases-with-auto-squashing-git-commits/) and 
  [Super-charging 'git rebase' with 'git absorb'](https://andrewlock.net/super-charging-git-rebase-with-git-absorb/)
  by Andrew Lock on .NET Escapades.
  [git-absorb](https://github.com/tummychow/git-absorb) 
  (a port of Facebook's [hg absorb](https://www.mercurial-scm.org/repo/hg/rev/5111d11b8719) extension for Mercurial)
  was mentioned in passing in [Git Rev News Edition #72](https://git.github.io/rev_news/2021/02/27/edition-72/).
+ [Modeling Git Internals in Alloy, Part 1: Blobs and Trees](https://bytes.zone/posts/modeling-git-internals-in-alloy-part-1-blobs-and-trees/)
  and [Modeling Git Internals in Alloy, Part 2: Commits and Tags](https://bytes.zone/posts/modeling-git-internals-in-alloy-part-2-commits-and-tags/)
  by Brian Hicks on bytes.zone.
  [Alloy](https://bytes.zone/posts/alloy/) is [a tool](http://alloytools.org/)
  (with its own domain-specific programming language)
  used for making and checking models of other software.
+ [Avoiding the merge trap](https://lwn.net/Articles/926240/)
  by Jonathan Corbet on LWN.net
  describes how one should explain merges in pull requests sent to Linus Torvalds.
+ [Notes on graphics programming and version control](https://tyler.cafe/graphics-and-versions)
  Tyler Angert on tyler\.cafe blog.
+ [Introducing the Space Git Flow](https://blog.jetbrains.com/space/2023/04/18/space-git-flow/)
  by Evgenia Verbina on JetBrains Blog.  Space Git Flow is a branching strategy
  similar to [Git Flow](https://blog.jetbrains.com/space/2023/04/18/space-git-flow/)
  (first mentioned in [Git Rev News Edition #5](https://git.github.io/rev_news/2015/07/08/edition-5/))
  and specifically [GitHub Flow](https://docs.github.com/en/get-started/quickstart/github-flow),
  used by JetBrains to develop their products including 
  [Space](https://git.github.io/rev_news/2020/03/25/edition-61/) development platform / software forge.<br>
  See also:
    * [Please stop recommending Git Flow!](https://georgestocker.com/2020/03/04/please-stop-recommending-git-flow/)
      by George Stocker, mentioned in [Git Rev News #61](https://git.github.io/rev_news/2020/03/25/edition-61/).
    * [Patterns for Managing Source Code Branches](https://martinfowler.com/articles/branching-patterns.html)
      by Martin Fowler, mentioned first in [Git Rev News #63](https://git.github.io/rev_news/2020/05/28/edition-63/).
+ [Convert git log output to JSON using jq](https://til.simonwillison.net/jq/git-log-json)
  with proper escaping, on Simon Willisonâ€™s TILs (Today I've Learned).
+ [Quickly formatting a stack of commits](https://blog.waleedkhan.name/formatting-a-commit-stack/)
  by Waleed Khan on Steno & PL personal blog.
  It uses the `git test` command from the [git-branchless](https://github.com/arxanas/git-branchless)
  suite of tools, which was first mentioned 
  in [Git Rev News Edition #76](https://git.github.io/rev_news/2021/06/27/edition-76/).
+ [How to Install GitQlient on Your Synology NAS](https://mariushosting.com/how-to-install-gitqlient-on-your-synology-nas/)
  by Marius Bogdan Lixandru on his personal blog: Marius Hosting.
+ [Some ~~secret~~ git tricks that come in handy](https://dev.to/atordvairn/some-secret-git-tricks-that-come-in-handy-2k8i)
  by raghav yadav on DEV\.to.
+ [Git banned.h: Why Git's Maintainers Have A List Of Banned Standard C Library Functions](https://initialcommit.com/blog/git-banned-functions)
  by Jacob Stopak on Initial Commit.
+ [GitHub Copilot for CLI makes Terminal scripting and Git as easy as asking a question](https://dev.to/codepo8/github-copilot-for-cli-makes-terminal-scripting-and-git-as-easy-as-asking-a-question-3m81)
  by Christian Heilmann on DEV\.to.

<!-- next list -->

+ [sqlite-history: tracking changes to SQLite tables using triggers](https://simonwillison.net/2023/Apr/15/sqlite-history/)
  by Simon Willison on his Weblog.
+ [SmartCommit: A Graph-Based Interactive Assistant for Activity-Oriented Commits](https://www.cs.cmu.edu/~ckaestne/pdf/fse21_sc.pdf) \[PDF]
  ([DOI:10.1145/3468264.3468551](https://doi.org/10.1145/3468264.3468551)) describes
  a graph-partitioning-based interactive tool to help split tangled changesets.
  The paper is accompanied by the [code for the core algorithm](https://github.com/Symbolk/SmartCommitCore)
  of SmartCommit, a [demo GUI client](https://github.com/Symbolk/SmartCommit),
  and [dataset and the visualization scripts](https://github.com/Symbolk/SmartCommitEvaluation-Viz)
  used in the article.  Since then, similar research studies have been conducted,
  like [ComUnt](https://doi.org/10.1145/3545258.3545267)
  and [UTango](https://doi.org/10.1145/3540250.3549171),
  which cite the SmartCommit article.

<!---
__Easy watching__
-->

__Git tools and sites__
+ [List of Free Learning Resources (In Many Languages)](https://github.com/EbookFoundation/free-programming-books)
  by the Free Ebook Foundation, includes the list organized by subject,
  where there are [free books about Version Control Systems](https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-subjects.md#version-control-systems),
  including Git. Some of those were mentioned in Git Rev News.
  This list was originally a clone of 
  [StackOverflow - List of Freely Available Programming Books](https://web.archive.org/web/20140606191453/http://stackoverflow.com/questions/194812/list-of-freely-available-programming-books/392926).
  Has a dynamic webpage for searching the list at 
  <https://ebookfoundation.github.io/free-programming-books-search/>.
+ [GitQlient](https://github.com/francescmm/GitQlient) is a multi-platform Git client written with Qt,
  originally forked from [QGit](https://github.com/tibirna/qgit).
+ [Gut](https://gut-cli.dev/) is a user-friendly Git CLI for Windows, Mac, and GNU/Linux.
  Written in Go, still in alpha stage of development.
+ [srcsnap](http://srcsnap.glitch.me/) ([repository](https://github.com/LingDong-/srcsnap))
  is a screenshot-driven version tracking tool, written using Electron.  It's described in
  [Srcsnap â€” Screenshot-Driven Version Tracking](https://www.media.mit.edu/projects/srcsnap-screenshot-driven-version-tracking/overview/) post
  on [Future Sketches](https://www.media.mit.edu/groups/future-sketches/overview/)
  MIT Media Lab group blog.
+ [diff2html](https://github.com/rtfpessoa/diff2html) is a JavaScript library
  that generates pretty HTML diffs from `git diff` or unified `diff` output.

## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub NarÄ™bski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from Bruno Brito.
